var express=require('express')
var path=require('path')
var bodyParser=require('body-parser')
var multer  = require('multer')
var fs = require('fs')
var logger = require('morgan');
var flash = require('connect-flash');
var http=require('http');
var qs=require('querystring');
app=express()

app.set('port',8080)
var storage = multer.diskStorage({
  destination: function (req, file, cb) {
    cb(null, './dist/images')
  },
  filename: function (req, file, cb) {
    console.log("file",file)
    var date=new Date()
    var Month=date.getMonth()+1,Seconds=new Date().getSeconds()
    Month=Month<10?"0"+Month:Month
    var Hours=date.getHours()<10?"0"+date.getHours():date.getHours()
    var Minutes=date.getMinutes()<10?"0"+date.getMinutes():date.getMinutes()
    Seconds=Seconds<10?"0"+Seconds:Seconds
    date=date.getFullYear() + "" + Month + "" + Hours+""+Minutes+""+Seconds+""
    var type=(file.originalname).split(".");
    cb(null, file.fieldname + date+"."+type[type.length - 1])
  }
})
var accessLog = fs.createWriteStream('access.log', {flags: 'a'});
var errorLog = fs.createWriteStream('error.log', {flags: 'a'});
app.use(logger('short'));
app.use(logger({stream: accessLog}));
app.use(function (err, req, res, next) {
  var meta = '[' + new Date() + '] ' + req.url + '\n';
  errorLog.write(meta + err.stack + '\n');
  next();
});

var uploadImg = multer({ storage: storage })
uploadImg=uploadImg.single('upload');

app.use(bodyParser.urlencoded({ extended: true }));
app.use(flash());
app.use(express.static(__dirname))
app.all('*',function (req, res, next) {
  res.header('Access-Control-Allow-Origin', 'http://localhost:7070');
  res.header('Access-Control-Allow-Headers', 'Content-Type=application/json;charset=UTF-8');
  /* res.header('Access-Control-Allow-Methods', 'PUT, POST, GET, DELETE, OPTIONS');*/
  next();
});

function post(url,data,fn){
  data=data||{};
  var content=require('querystring').stringify(data);
  var parse_u=require('url').parse(url,true);
  var isHttp=parse_u.protocol=='http:';
  var options={
   host:parse_u.hostname,
   port:parse_u.port||(isHttp?80:443),
   path:parse_u.path,
   method:'POST',
   headers:{
    'Content-Type':'application/x-www-form-urlencoded',
    'Content-Length':content.length
  }
};
var req = require(isHttp?'http':'https').request(options,function(res){
  var _data='';
  res.on('data', function(chunk){
   _data += chunk;
 });
  res.on('end', function(){
    fn!=undefined && fn(_data);
  });
});
req.write(content);
req.end();
}

app.post('/send-email', function (req, res) {
  // console.log("req==>",req.body)
  let fs = require('fs');
  let pdf = require('html-pdf');
  let html = fs.readFileSync('./index.html', 'utf8');
  let options = { format: 'Letter' };

  pdf.create(html, options).toFile('./graphs.pdf', function(err, res) {
    if (err) return console.log(err);
    console.log(res); // { filename: '/app/businesscard.pdf' }
    let nodemailer = require('nodemailer');
    let transporter = nodemailer.createTransport({
      service: 'gmail',
      auth: {
        user: 'fish444558@gmail.com',
        pass: 'YourEmailPassword'
      }
    });

    let mailOptions = {
      from: 'fish444558@gmail.com',
      to: req.body.to,
      cc: req.body.cc,
      bcc: req.body.bcc,
      subject: 'Sending Email from Verizon DT Small quiz',
      text: 'Graphs generated by High Chart',
      attachment: [
        {
          filename: "graphs.pdf",
          path: "./graphs.pdf"
        }
      ]
    }
    let crontab = require('node-crontab');
    let minute = req.body.min === "Min" ? "*" : req.body.min,
    hour = req.body.hour === "Hour" ? "*" : req.body.hour,
    day = req.body.day === "Day" ? "*" : req.body.day,
    month = req.body.month === "Month" ? "*" : req.body.month

    let runningTime = minute + " " + hour + " " + day + " " + month + " *"
    console.log(runningTime)
    if (runningTime === "* * * * *") {//send email immediately
      transporter.sendMail(mailOptions, function(error, info){
        if (error) {
          console.log(error);
        } else {
          console.log('Email sent: ' + info.response);
        }
      });
    }
    else {
      let jobId = crontab.scheduleJob(runningTime, function(){
        transporter.sendMail(mailOptions, function(error, info){
          if (error) {
            console.log(error);
          } else {
            console.log('Email sent: ' + info.response);
          }
        });
      }, null, null, false);
    }
  });
});

app.listen(app.get('port'), function(){
  console.log('Please open localhost: ' + app.get('port'));
});





